import argparse
import json
import sys

class MarkdownTable:
    def __init__(self, n_cols):
        self.n_cols = n_cols
        self.sizes = [0] * self.n_cols
        self.lines = []

    def append_line(self, elements):
        if len(elements) != self.n_cols:
            raise "Wrong column count when appending a column"

        str_elements = []
        for col, elem in enumerate(elements):
            selem = str(elem)
            str_elements.append(selem)
            self.sizes[col] = max(self.sizes[col], len(selem))
        self.lines.append(str_elements)

    def append_end_of_header(self):
        self.append_line(["---"] * self.n_cols)

    def display(self, file):
        for line in self.lines:
            elements = [elem.ljust(w) for w, elem in zip(self.sizes, line)]
            print("|", " | ".join(elements), "|", file=file)


def event_types_list(event_types, file=sys.stdout):
    print(f"### Event types\n", file=file)

    table = MarkdownTable(4)
    table.append_line(["SECL Event", "Type", "Definition", "Agent Version"])
    table.append_end_of_header()

    for event_type in event_types:
        keys = ["name", "type", "definition", "from_agent_version"]
        table.append_line([event_type[key] for key in keys])

    table.display(file=file)

def event_type_properties_list(event_type, file=sys.stdout):
    print(f"### Event `{event_type['name']}`\n", file=file)

    table = MarkdownTable(3)
    table.append_line(["Property", "Type", "Definition"])
    table.append_end_of_header()

    for prop in event_type["properties"]:
        keys = ["name", "type", "definition"]
        table.append_line([prop[key] for key in keys])

    table.display(file=file)


parser = argparse.ArgumentParser(description="Generate SECL documentation")
parser.add_argument("--input", type=str, help="input json file generated by the accessors generator")
parser.add_argument("--output", type=str, help="output file")
args = parser.parse_args()

with open(args.input) as f:
    secl_doc = json.load(f)

with open(args.output, "w") as f:
    event_types = secl_doc["secl"]

    print("# SECL Documentation\n", file=f)
    event_types_list(event_types, file=f)
    print("\n", file=f)

    for event_type in event_types:
        event_type_properties_list(event_type, file=f)
        print("\n", file=f)
